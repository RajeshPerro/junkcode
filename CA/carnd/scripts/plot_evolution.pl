#!/usr/bin/perl -w
#
# Print a picture of the evolution using the file bog.dat
# generated by galib.
#
# Usage (on X11):
#
# 1) open a terminal
# 2) ./plot_evolution.pl bog.dat
# To have gnuplot output to the file evolution.png use:
# 3) ./plot_evolution.pl -p bog.dat

#TODO: I couldnt't have gnuplot read data from stding
#      with more than one variable.

use strict;
use Fcntl;
use POSIX qw(tmpnam);
use Getopt::Long;

my $opt_png  = 0;
my $opt_help = 0;

my $HELP = "$0 [-png] [-x11] [bog.dat]\nIf you don't provide the bog.dat file I will read input from stdin.\nThe option -png tells me to write to the file evolution.png.\nIf -png is not given, gnuplot will output to x11\n";

die $HELP if
  !GetOptions('p|png'   => \$opt_png,
              'h|help', => \$opt_help)
  or
    $opt_help;

$|++;

my $GNUPLOT="/usr/bin/gnuplot";
my $tmpfile;
do { $tmpfile = tmpnam() } until sysopen(TMP, $tmpfile, O_RDWR|O_CREAT|O_EXCL);

while (<>)
{
  if(/^(\d+)\s+([\d|e|\-|.]+)\s+([\d|e|\-|.]+)\s+([\d|e|\-|.]+)/)
  {
    print TMP "$1 $2 $3 $4\n";
  }
}

open(PLOT, "| $GNUPLOT -persist -") || die ("Can't start $GNUPLOT: $!");

print PLOT 'set title "Generations vs. Fitness"'."\n";

if ($opt_png)
{
  print PLOT 'set terminal png small;';
  print PLOT 'set output "evolution.png"; set size 0.7,0.7;'
    if ($opt_png);
  print PLOT "\n"
}
print PLOT "set key outside below\nset autoscale\n";
print PLOT "plot  '$tmpfile' using 1:3 t \"maximum\" with lines,".
           "'' using 1:2 t \"average\" with lines,".
           "'' using 1:4 t \"minimum\" with lines\n";

close(PLOT);
close(TMP);
unlink($tmpfile);
